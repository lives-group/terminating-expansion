module NPCF.Syntax where

-- open import Common.Context using (Context; ø; _,_⦂_; _⦂_∈_; here; there)
-- open import Common.Type using (Type; nat; _⇒_)
-- open import Common.Name using (Name)
-- open import Common.Depth using (Depth; ⇑; ⇓)
--
-- infix 9 _N⊢_
--
-- data _N⊢_ : Context → Type → Depth → Set where
--   err : ∀{Γ τ} → (Γ N⊢ τ) ⇓
--   zer : ∀{Γ} → (Γ N⊢ nat) ⇓
--   suc : ∀{Γ} → (Γ N⊢ nat) ⇓ → (Γ N⊢ nat) ⇓
--   var : ∀{Γ τ} (v : Name) → v ⦂ τ ∈ Γ → (Γ N⊢ τ) ⇓
--   abs : ∀{Γ τ τ'} (v : Name) → (Γ , v ⦂ τ N⊢ τ') ⇓ → (Γ N⊢ τ ⇒ τ') ⇓
--   app : ∀{Γ τ τ'} → (Γ N⊢ τ ⇒ τ') ⇓ → (Γ N⊢ τ) ⇓ → (Γ N⊢ τ') ⇓
--   match_[z⇨_suc_⇨_] : ∀{Γ τ} → (Γ N⊢ nat) ⇓ → (Γ N⊢ τ) ⇓ → (v : Name) → (Γ , v ⦂ nat N⊢ τ) ⇓ → (Γ N⊢ τ) ⇓
--   let´_←_in´_ : ∀{Γ τ τ' ρ} (v : Name) → (Γ N⊢ τ) ⇓ → (Γ , v ⦂ τ N⊢ τ') ρ → (Γ N⊢ τ') ⇑
--
-- infix 9 _N⊢´_⊚_
--
-- _N⊢´_⊚_ : Context → Type → Depth → Set
-- Γ N⊢´ τ ⊚ ρ = (Γ N⊢ τ) ρ
